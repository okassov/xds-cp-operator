apiVersion: xds.okassov/v1alpha1
kind: XDSControlPlane
metadata:
  labels:
    app.kubernetes.io/name: xds-cp-operator
    app.kubernetes.io/managed-by: kustomize
  name: xdscontrolplane-sample
  namespace: default
spec:
  xdsPort: 18000
  # Multiple Envoy node IDs that will receive this configuration
  nodeIDs:
    - external-envoy
    - envoy-proxy-1
    - envoy-proxy-2
  listeners:
    # HTTP listener without proxy protocol
    - name: ingress_http
      address: 0.0.0.0
      port: 80
      accessLog:
        - name: envoy.access_loggers.file
          typedConfig:
            "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
            path: /var/log/envoy/access_http.log
            log_format:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                bytes_received: "%BYTES_RECEIVED%"
                bytes_sent: "%BYTES_SENT%"
                downstream_local_address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                downstream_remote_address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                response_flags: "%RESPONSE_FLAGS%"
                connection_termination_details: "%CONNECTION_TERMINATION_DETAILS%"
                requested_server_name: "%REQUESTED_SERVER_NAME%"
                filter_chain_name: "%FILTER_CHAIN_NAME%"
      filterChains:
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typedConfig:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: ingress_http
                cluster: nodeport-30080

    # HTTP listener WITH downstream proxy protocol (from load balancer)
    - name: ingress_http_with_proxy_protocol
      address: 0.0.0.0
      port: 8080
      # Listener filters for incoming proxy protocol
      listenerFilters:
        - name: envoy.filters.listener.proxy_protocol
          typedConfig:
            "@type": type.googleapis.com/envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol
      accessLog:
        - name: envoy.access_loggers.file
          typedConfig:
            "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
            path: /var/log/envoy/access_http_pp.log
            log_format:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                bytes_received: "%BYTES_RECEIVED%"
                bytes_sent: "%BYTES_SENT%"
                downstream_local_address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                downstream_remote_address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                response_flags: "%RESPONSE_FLAGS%"
                connection_termination_details: "%CONNECTION_TERMINATION_DETAILS%"
                requested_server_name: "%REQUESTED_SERVER_NAME%"
                filter_chain_name: "%FILTER_CHAIN_NAME%"
      filterChains:
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typedConfig:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: ingress_http_pp
                cluster: nodeport-30080

    # HTTPS listener with both downstream AND upstream proxy protocol
    - name: ingress_https
      address: 0.0.0.0
      port: 443
      accessLog:
        - name: envoy.access_loggers.file
          typedConfig:
            "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
            path: /var/log/envoy/access_https.log
            log_format:
              json_format:
                time: "%START_TIME%"
                protocol: "%PROTOCOL%"
                duration: "%DURATION%"
                bytes_received: "%BYTES_RECEIVED%"
                bytes_sent: "%BYTES_SENT%"
                downstream_local_address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                downstream_remote_address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
                upstream_host: "%UPSTREAM_HOST%"
                upstream_transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                response_flags: "%RESPONSE_FLAGS%"
                connection_termination_details: "%CONNECTION_TERMINATION_DETAILS%"
                requested_server_name: "%REQUESTED_SERVER_NAME%"
                filter_chain_name: "%FILTER_CHAIN_NAME%"
      filterChains:
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typedConfig:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: ingress_https
                cluster: nodeport-30443-with-proxy-protocol
  clusters:
    - name: nodeport-30080
      type: strict_dns
      lbPolicy: round_robin
      connectTimeout: 1s
      transportSocket:
        name: envoy.transport_sockets.upstream_proxy_protocol
        typedConfig:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.proxy_protocol.v3.ProxyProtocolUpstreamTransport
          config:
            version: V1
          transport_socket:
            name: envoy.transport_sockets.raw_buffer
            typedConfig:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer
      healthCheck:
        timeout: 5s
        interval: 15s
        unhealthyThreshold: 5
        healthyThreshold: 3
        reuseConnection: false
        tcpHealthCheck: {}
      loadAssignment:
        endpointsFrom:
          type: Node
          selector:
            matchLabels:
              kubernetes.io/hostname: infra-mycar-k8s-worker-shared-02
          port: 30080
    - name: nodeport-30443-with-proxy-protocol
      type: strict_dns
      lbPolicy: round_robin
      connectTimeout: 1s
      transportSocket:
        name: envoy.transport_sockets.upstream_proxy_protocol
        typedConfig:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.proxy_protocol.v3.ProxyProtocolUpstreamTransport
          config:
            version: V1
          transport_socket:
            name: envoy.transport_sockets.raw_buffer
            typedConfig:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.raw_buffer.v3.RawBuffer
      loadAssignment:
        endpointsFrom:
          type: Node
          selector:
            matchLabels:
              kubernetes.io/hostname: infra-mycar-k8s-worker-shared-02
          port: 30443
