apiVersion: xds.okassov/v1alpha1
kind: XDSControlPlane
metadata:
  name: integration-test
  namespace: default
spec:
  xdsPort: 18003
  nodeIDs:
    - test-envoy-node
  listeners:
    # HTTP listener with health check backend
    - name: http_listener
      address: 0.0.0.0
      port: 8000
      filterChains:
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typedConfig:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: http_proxy
                cluster: test-backend-cluster

    # TCP listener for TCP health check testing  
    - name: tcp_listener
      address: 0.0.0.0
      port: 8001
      filterChains:
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typedConfig:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp_proxy
                cluster: tcp-backend-cluster

  clusters:
    # Backend cluster with HTTP health check (no loadAssignment - will be empty cluster for healthcheck testing)
    - name: test-backend-cluster
      type: static
      lbPolicy: round_robin
      connectTimeout: 5s
      healthCheck:
        timeout: 3s
        interval: 5s
        intervalJitter: 1s
        unhealthyThreshold: 2
        healthyThreshold: 1
        reuseConnection: true
        httpHealthCheck:
          path: /health
          host: test-backend.local
          requestHeadersToAdd:
            - header:
                key: "X-Health-Check"
                value: "envoy-integration-test"
              append: false
            - header:
                key: "User-Agent"
                value: "envoy-healthchecker/1.0"
              append: false
          expectedStatuses:
            - start: 200
              end: 299

    # TCP backend cluster with TCP health check
    - name: tcp-backend-cluster
      type: static
      lbPolicy: round_robin
      connectTimeout: 3s
      healthCheck:
        timeout: 2s
        interval: 8s
        unhealthyThreshold: 3
        healthyThreshold: 2
        reuseConnection: false
        tcpHealthCheck:
          send: "U0VMRUNUIDEh"  # Base64 for "SELECT 1!"
          receive:
            - "MQ=="  # Base64 for "1" 