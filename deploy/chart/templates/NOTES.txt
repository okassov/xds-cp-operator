üéâ XDS Control Plane Operator has been successfully installed!

üì¶ Release Name: {{ .Release.Name }}
üîß Namespace: {{ .Release.Namespace }}
üìù Chart Version: {{ .Chart.Version }}
üè∑Ô∏è  App Version: {{ .Chart.AppVersion }}

{{- if .Values.serviceAccount.create }}
‚úÖ Service Account: {{ include "xds-cp-operator.serviceAccountName" . }}
{{- end }}

{{- if .Values.rbac.create }}
‚úÖ RBAC: ClusterRole and bindings created
{{- end }}

üìä Operator Configuration:
   ‚Ä¢ Replicas: {{ .Values.replicaCount }}
   ‚Ä¢ Metrics Address: {{ .Values.operator.metricsAddr }}
   ‚Ä¢ Leader Election: {{ .Values.operator.enableLeaderElection }}
   ‚Ä¢ Image: {{ include "xds-cp-operator.image" . }}

{{- if .Values.xdsService.enabled }}
üåê XDS Service Configuration:
   ‚Ä¢ Service Type: {{ .Values.xdsService.type }}
   ‚Ä¢ Port Range: {{ .Values.xdsService.portRange.start }}-{{ .Values.xdsService.portRange.end }}
   ‚Ä¢ Service Name: {{ include "xds-cp-operator.fullname" . }}-xds
{{- if eq .Values.xdsService.type "LoadBalancer" }}
   ‚Ä¢ External Access: LoadBalancer (check external IP)
   ‚Ä¢ Get LoadBalancer IP: kubectl get svc {{ include "xds-cp-operator.fullname" . }}-xds -n {{ .Release.Namespace }}
{{- else if eq .Values.xdsService.type "NodePort" }}
   ‚Ä¢ External Access: NodePort
   ‚Ä¢ Get NodePorts: kubectl get svc {{ include "xds-cp-operator.fullname" . }}-xds -n {{ .Release.Namespace }}
{{- else }}
   ‚Ä¢ External Access: ClusterIP (internal only)
{{- end }}
{{- else }}
‚ö†Ô∏è  XDS Service disabled - external Envoy proxies cannot connect
{{- end }}

{{- if .Values.serviceMonitor.enabled }}
üìà Monitoring:
   ‚Ä¢ ServiceMonitor enabled for Prometheus
   ‚Ä¢ Metrics available at: http://{{ include "xds-cp-operator.fullname" . }}-metrics.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}/metrics
{{- else }}
üìà Monitoring:
   ‚Ä¢ Metrics available at: http://{{ include "xds-cp-operator.fullname" . }}-metrics.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}/metrics
   ‚Ä¢ To enable Prometheus monitoring, set serviceMonitor.enabled=true
{{- end }}

{{- if .Values.autoscaling.enabled }}
‚öñÔ∏è  Autoscaling:
   ‚Ä¢ HPA enabled: {{ .Values.autoscaling.minReplicas }}-{{ .Values.autoscaling.maxReplicas }} replicas
   ‚Ä¢ CPU Target: {{ .Values.autoscaling.targetCPUUtilizationPercentage }}%
{{- if .Values.autoscaling.targetMemoryUtilizationPercentage }}
   ‚Ä¢ Memory Target: {{ .Values.autoscaling.targetMemoryUtilizationPercentage }}%
{{- end }}
{{- end }}

üöÄ What's Next?

1. Check operator status:
   kubectl get deployment {{ include "xds-cp-operator.fullname" . }} -n {{ .Release.Namespace }}

2. View operator logs:
   kubectl logs -f deployment/{{ include "xds-cp-operator.fullname" . }} -n {{ .Release.Namespace }}

{{- if .Values.xdsService.enabled }}
3. Check xDS service status:
   kubectl get svc {{ include "xds-cp-operator.fullname" . }}-xds -n {{ .Release.Namespace }}

{{- if eq .Values.xdsService.type "LoadBalancer" }}
4. Get LoadBalancer external IP (may take a few minutes):
   kubectl get svc {{ include "xds-cp-operator.fullname" . }}-xds -n {{ .Release.Namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

{{- else if eq .Values.xdsService.type "NodePort" }}
4. Get NodePort for external access:
   kubectl get svc {{ include "xds-cp-operator.fullname" . }}-xds -n {{ .Release.Namespace }} -o jsonpath='{.spec.ports[0].nodePort}'

{{- end }}
{{- end }}

5. Create your first XDS Control Plane:
   cat <<EOF | kubectl apply -f -
   apiVersion: xds.okassov/v1alpha1
   kind: XDSControlPlane
   metadata:
     name: example-xds
     namespace: default
   spec:
     xdsPort: {{ .Values.xdsService.portRange.start }}
     nodeIDs:
       - "envoy-proxy-1"
     clusters:
       - name: backend-service
         type: static
         lbPolicy: round_robin
         connectTimeout: 5s
     listeners:
       - name: main-listener
         address: 0.0.0.0
         port: 8080
         filterChains:
           - filters:
               - name: envoy.filters.network.tcp_proxy
                 typedConfig:
                   "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                   cluster: backend-service
                   stat_prefix: tcp_proxy
   EOF

6. Check XDS Control Plane status:
   kubectl get xdscontrolplane example-xds -o wide

üìö Documentation:
   ‚Ä¢ Chart README: https://github.com/okassov/xds-cp-operator/tree/main/deploy/chart
   ‚Ä¢ Operator README: https://github.com/okassov/xds-cp-operator
   ‚Ä¢ Health Checks Guide: See repository documentation
   ‚Ä¢ External Envoy Setup: Chart README has Envoy configuration examples

üí° Tips:
   ‚Ä¢ Use 'helm get values {{ .Release.Name }} -n {{ .Release.Namespace }}' to see current configuration
   ‚Ä¢ Use 'helm upgrade {{ .Release.Name }} deploy/chart/ -n {{ .Release.Namespace }}' to upgrade
   ‚Ä¢ Monitor operator metrics for performance insights
{{- if .Values.xdsService.enabled }}
   ‚Ä¢ Test xDS connectivity: kubectl port-forward svc/{{ include "xds-cp-operator.fullname" . }}-xds {{ .Values.xdsService.portRange.start }}:{{ .Values.xdsService.portRange.start }} -n {{ .Release.Namespace }}
{{- end }}

{{- if not .Values.serviceMonitor.enabled }}

‚ö†Ô∏è  Consider enabling monitoring in production:
   helm upgrade {{ .Release.Name }} deploy/chart/ -n {{ .Release.Namespace }} --set serviceMonitor.enabled=true

{{- end }}

{{- if not .Values.xdsService.enabled }}

‚ö†Ô∏è  XDS Service is disabled. To enable external Envoy access:
   helm upgrade {{ .Release.Name }} deploy/chart/ -n {{ .Release.Namespace }} --set xdsService.enabled=true

{{- end }} 